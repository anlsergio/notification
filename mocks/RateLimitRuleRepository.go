// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	domain "notification/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// RateLimitRuleRepository is an autogenerated mock type for the RateLimitRuleRepository type
type RateLimitRuleRepository struct {
	mock.Mock
}

// GetByNotificationType provides a mock function with given fields: notificationType
func (_m *RateLimitRuleRepository) GetByNotificationType(notificationType domain.NotificationType) (domain.RateLimitRule, error) {
	ret := _m.Called(notificationType)

	if len(ret) == 0 {
		panic("no return value specified for GetByNotificationType")
	}

	var r0 domain.RateLimitRule
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NotificationType) (domain.RateLimitRule, error)); ok {
		return rf(notificationType)
	}
	if rf, ok := ret.Get(0).(func(domain.NotificationType) domain.RateLimitRule); ok {
		r0 = rf(notificationType)
	} else {
		r0 = ret.Get(0).(domain.RateLimitRule)
	}

	if rf, ok := ret.Get(1).(func(domain.NotificationType) error); ok {
		r1 = rf(notificationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: notificationType, rule
func (_m *RateLimitRuleRepository) Save(notificationType domain.NotificationType, rule domain.RateLimitRule) error {
	ret := _m.Called(notificationType, rule)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.NotificationType, domain.RateLimitRule) error); ok {
		r0 = rf(notificationType, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRateLimitRuleRepository creates a new instance of RateLimitRuleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimitRuleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimitRuleRepository {
	mock := &RateLimitRuleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
