// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "notification/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RateLimitHandler is an autogenerated mock type for the RateLimitHandler type
type RateLimitHandler struct {
	mock.Mock
}

// IsRateLimited provides a mock function with given fields: ctx, userID, notificationType
func (_m *RateLimitHandler) IsRateLimited(ctx context.Context, userID string, notificationType domain.NotificationType) (time.Duration, func() error, error) {
	ret := _m.Called(ctx, userID, notificationType)

	if len(ret) == 0 {
		panic("no return value specified for IsRateLimited")
	}

	var r0 time.Duration
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.NotificationType) (time.Duration, func() error, error)); ok {
		return rf(ctx, userID, notificationType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.NotificationType) time.Duration); ok {
		r0 = rf(ctx, userID, notificationType)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.NotificationType) func() error); ok {
		r1 = rf(ctx, userID, notificationType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, domain.NotificationType) error); ok {
		r2 = rf(ctx, userID, notificationType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRateLimitHandler creates a new instance of RateLimitHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimitHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimitHandler {
	mock := &RateLimitHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
