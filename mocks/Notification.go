// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	service "notification/internal/service"

	mock "github.com/stretchr/testify/mock"
)

// Notification is an autogenerated mock type for the Notification type
type Notification struct {
	mock.Mock
}

// Send provides a mock function with given fields: ctx, userID, msg, notificationType
func (_m *Notification) Send(ctx context.Context, userID string, msg string, notificationType service.NotificationType) error {
	ret := _m.Called(ctx, userID, msg, notificationType)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, service.NotificationType) error); ok {
		r0 = rf(ctx, userID, msg, notificationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotification creates a new instance of Notification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotification(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notification {
	mock := &Notification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
